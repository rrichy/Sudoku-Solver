package com.rrichy;

import java.util.Date;
// This Sudoku solver only solves puzzles that are NxN size,
// where N is a perfect square.

public class Main {
    public static void main(String[] args) {
        long t0 = new Date().getTime();

//        4x4
        SudokuSolver sudoku = new SudokuSolver(new int[][] {
                {1,0,4,0},
                {0,0,0,0},
                {3,0,0,0},
                {0,2,0,0}
        });

//        9x9
//	    SudokuSolver sudoku = new SudokuSolver(new int[][] {
//	            {0, 0, 6, 1, 0, 0, 0, 0, 8},
//                {0, 8, 0, 0, 9, 0, 0, 3, 0},
//                {2, 0, 0, 0, 0, 5, 4, 0, 0},
//                {4, 0, 0, 0, 0, 1, 8, 0, 0},
//                {0, 3, 0, 0, 7, 0, 0, 4, 0},
//                {0, 0, 7, 9, 0, 0, 0, 0, 3},
//                {0, 0, 8, 4, 0, 0, 0, 0, 6},
//                {0, 2, 0, 0, 5, 0, 0, 8, 0},
//                {1, 0, 0, 0, 0, 2, 5, 0, 0}
//	    });

////        16x16
//        SudokuSolver sudoku = new SudokuSolver(new int[][] {
//                {16, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
//                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//                {0, 5, 0, 0, 0, 1, 7, 0, 0, 0, 0, 10, 16, 0, 4, 0},
//                {0, 0, 11, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 6, 0, 0},
//                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
//                {0, 0, 0, 0, 0, 0, 6, 0, 13, 16, 0, 4, 0, 0, 0, 0},
//                {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//                {0, 13, 16, 11, 3, 14, 5, 0, 0, 0, 0, 7, 0, 0, 0, 0},
//                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0},
//                {0, 0, 0, 1, 0, 0, 9, 0, 0, 0, 16, 11, 0, 0, 0, 0},
//                {0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0},
//                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//                {0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0},
//                {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0},
//                {5, 12, 0, 0, 0, 0, 0, 8, 6, 0, 0, 0, 0, 0, 0, 0}
//        });

//        25x25
//        SudokuSolver sudoku = new SudokuSolver(new int[][] {  most likely wrong puzzle input
//                {21,0,0,0,0,    19,0,16,0,20,   24,25,0,0,22,   0,0,0,0,0,      5,0,10,0,0},
//                {0,5,0,0,11,    0,6,0,13,9,     0,0,16,0,20,    0,0,18,0,22,    0,7,0,0,0},
//                {15,3,0,0,0,    0,0,14,0,0,     0,6,0,13,0,     0,0,0,0,0,      0,25,0,0,22},
//                {22,0,0,0,17,   0,3,7,0,0,      0,0,0,0,0,      0,0,0,13,9,     0,0,0,8,0},
//                {0,0,12,16,8,   22,24,25,0,17,  0,0,0,0,2,      0,0,0,0,0,      21,6,4,0,9},
//
//                {0,0,0,0,0,     20,0,0,16,8,    0,0,0,0,17,     0,3,0,0,0,      23,0,14,0,11},
//                {11,0,5,0,10,   0,0,0,4,13,     0,0,0,16,0,     22,0,0,0,17,    0,0,7,1,2},
//                {2,0,0,0,1,     0,0,5,0,10,     0,0,0,4,13,     20,0,12,16,8,   0,0,0,0,17},
//                {17,22,24,0,0,  2,0,0,0,1,      0,23,0,14,0,    0,0,6,0,0,      0,0,0,16,0},
//                {8,20,0,0,0,    0,22,24,25,0,   2,0,3,0,1,      0,0,5,0,10,     9,0,0,0,0},
//
//                {0,0,21,0,4,    0,0,0,0,16,     0,22,0,0,0,     2,0,0,0,1,      11,0,0,14,10},
//                {10,11,23,5,14, 0,0,21,6,4,     0,20,0,0,0,     0,0,24,0,0,     2,0,3,7,0},
//                {0,0,0,3,7,     10,11,23,0,0,   13,0,0,6,0,     0,0,0,0,0,      0,22,0,25,0},
//                {0,0,0,24,0,    0,2,0,3,0,      10,0,0,0,0,     0,9,21,0,0,     8,0,19,0,0},
//                {0,8,0,19,12,   0,0,0,0,0,      1,0,0,3,0,      0,11,23,5,0,    0,0,21,0,0},
//
//                {0,0,0,21,0,    0,0,20,19,12,   18,17,22,0,0,   1,0,15,0,0,     0,0,0,5,0},
//                {0,0,0,0,0,     4,0,0,0,0,      0,8,20,0,0,     18,17,0,24,25,  1,2,15,0,0},
//                {0,1,2,0,3,     14,10,0,0,5,    0,0,9,0,0,      0,0,0,0,12,     0,17,22,0,25},
//                {25,18,0,22,0,  7,0,2,0,3,      0,10,11,23,0,   0,13,0,21,6,    0,0,20,19,0},
//                {0,16,8,0,19,   0,0,17,22,0,    7,1,0,15,3,     0,10,11,23,5,   0,13,9,0,0},
//
//                {0,4,13,0,21,   12,16,0,20,19,  0,0,0,0,24,     0,0,0,0,0,      0,0,0,0,5},
//                {0,0,10,11,0,   6,0,0,0,0,      0,0,8,0,19,     25,0,17,0,24,   0,0,2,0,0},
//                {3,7,0,2,0,     5,0,0,11,23,    0,0,13,0,0,     0,0,0,0,19,     25,0,0,22,24},
//                {24,0,18,0,0,   0,7,1,0,15,     5,0,0,0,0,      6,0,13,9,0,     12,16,0,0,0},
//                {19,0,0,0,0,    0,25,0,17,0,    0,7,0,0,15,     0,14,0,0,0,     0,4,13,0,0}
//        });

//        sudoku.createDLXMatrix();
//        sudoku.printDLXMatrix();
//        sudoku.solve();
        System.out.println("");
        System.out.print("Finished in " + (new Date().getTime() - t0) + "ms.");
//        System.out.println(sudoku.size);
    }
}
